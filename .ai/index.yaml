# Purpose: AI navigation index for thai-lint repository
# Scope: Repository structure, available resources, commands, and documentation
# Overview: Provides AI agents with a quick reference to navigate the thai-lint repository structure,
#     locate key files, understand available commands, and access documentation. Essential for AI agents
#     to quickly orient themselves when working on the AI linter project.

version: "1.0"
project:
  name: thai-lint
  type: cli
  purpose: The AI Linter - Lint and governance for AI-generated code across multiple languages
  status: in-development
  version: "0.1.0"

structure:
  source:
    location: src/
    description: Main source code for CLI application and linters

  tests:
    location: tests/
    description: Test files for CLI and linter functionality

  docs:
    location: docs/
    description: User-facing documentation

  ai_navigation:
    location: .ai/
    description: AI agent navigation and context

documentation:
  location: .ai/docs/
  files:
    - PROJECT_CONTEXT.md
    - SECURITY_STANDARDS.md
    - secrets-management.md
    - dependency-scanning.md
    - code-scanning.md

howto:
  location: .ai/howtos/
  files:
    - documentation-howtos-README.md
    - how-to-add-custom-hook.md
    - how-to-configure-code-scanning.md
    - how-to-create-readme.md
    - how-to-debug-failing-hooks.md
    - how-to-document-api.md
    - how-to-fix-linting-errors.md
    - how-to-install-pre-commit.md
    - how-to-prevent-secrets-in-git.md
    - how-to-refactor-for-quality.md
    - how-to-roadmap.md
    - how-to-setup-dependency-scanning.md
    - how-to-write-file-headers.md
    - how-to-write-tests.md

standards:
  security:
    description: "Security standards and best practices"
    documentation:
      - path: "docs/SECURITY_STANDARDS.md"
        description: "Comprehensive security standards"
      - path: "docs/secrets-management.md"
        description: "Secrets management best practices"
      - path: "docs/dependency-scanning.md"
        description: "Dependency vulnerability scanning"
      - path: "docs/code-scanning.md"
        description: "Code security scanning (SAST)"
    howtos:
      - path: "howtos/how-to-prevent-secrets-in-git.md"
        description: "Prevent committing secrets to Git"
      - path: "howtos/how-to-setup-dependency-scanning.md"
        description: "Setup dependency vulnerability scanning"
      - path: "howtos/how-to-configure-code-scanning.md"
        description: "Configure code security scanning"
  documentation:
    file_headers: .ai/docs/FILE_HEADER_STANDARDS.md
    readme_standards: .ai/docs/readme-standards.md
    api_documentation: .ai/docs/api-documentation.md
  pre-commit-hooks:
    description: "Pre-commit hooks for automated code quality enforcement"
    documentation:
      - path: "docs/PRE_COMMIT_STANDARDS.md"
        description: "Pre-commit hooks standards and configuration"
    howtos:
      - path: "howtos/how-to-install-pre-commit.md"
        description: "Install and configure pre-commit hooks"
      - path: "howtos/how-to-add-custom-hook.md"
        description: "Create custom pre-commit hooks"
      - path: "howtos/how-to-debug-failing-hooks.md"
        description: "Debug failing pre-commit hooks"
    configuration:
      - path: ".pre-commit-config.yaml"
        description: "Pre-commit hooks configuration"

templates:
  location: .ai/templates/
  files:
    - file-header-markdown.template
    - file-header-python.template
    - file-header-typescript.template
    - file-header-yaml.template
    - README.template
    - roadmap-progress-tracker.md.template
    - roadmap-pr-breakdown.md.template
    - roadmap-ai-context.md.template
  documentation:
    - .ai/templates/file-header-markdown.template
    - .ai/templates/file-header-python.template
    - .ai/templates/file-header-typescript.template
    - .ai/templates/file-header-yaml.template
    - .ai/templates/README.template

roadmaps:
  location: .roadmap/
  guide: .ai/howtos/how-to-roadmap.md
  workflow_docs: .ai/docs/ROADMAP_WORKFLOW.md

  structure:
    planning: .roadmap/planning/
    in_progress: .roadmap/in-progress/
    complete: .roadmap/complete/

  templates:
    progress_tracker: .ai/templates/roadmap-progress-tracker.md.template
    pr_breakdown: .ai/templates/roadmap-pr-breakdown.md.template
    ai_context: .ai/templates/roadmap-ai-context.md.template

  three_document_structure:
    - PROGRESS_TRACKER.md (required - primary handoff)
    - PR_BREAKDOWN.md (required for multi-PR)
    - AI_CONTEXT.md (optional - architecture)

commands:
  # Will be added as tooling is installed
  # test: just test
  # lint: just lint
  # format: just format
  # cli: python -m src.cli

key_files:
  readme: README.md
  gitignore: .gitignore
  agents: AGENTS.md

repository:
  environment-setup:
    description: "Environment variable handling with direnv and .env files"
    documentation:
      - path: "docs/repository/environment-variables-best-practices.md"
        description: "Best practices for environment variable management"
      - path: "docs/repository/ENVIRONMENT_STANDARDS.md"
        description: "Environment variable standards and requirements"
    howtos:
      - path: "howtos/repository/environment-setup-readme.md"
        description: "Environment setup how-to guide"
    configuration:
      - path: ".envrc"
        description: "Direnv configuration for auto-loading .env"
      - path: ".env.example"
        description: "Template for environment variables"

architecture:
  pattern: cli-application
  # Python CLI tool with Click framework
  # Multi-language linter support (extensible architecture)

application:
  type: cli
  stack: [python, click, docker]
  howtos: .ai/howtos/python-cli/
  templates: .ai/templates/python-cli/
  primary_language: python
  frameworks: [click, pytest]

notes_for_agents:
  - This is a CLI application for linting AI-generated code
  - Designed to work across multiple programming languages
  - Focus on catching common AI mistakes and anti-patterns
  - Update this file as the project structure evolves
