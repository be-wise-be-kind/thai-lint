# Purpose: Template for secure environment variable configuration with clear placeholders and documentation
# Scope: All applications requiring environment-specific configuration and secrets management
# Overview: Provides a comprehensive template for documenting required environment variables without
#     exposing actual secrets. Includes sections for common configuration categories including application
#     settings, database connections, caching, cloud services, external APIs, authentication, and monitoring.
#     Each variable includes clear placeholder syntax, description, example values, and generation instructions
#     where applicable. Serves as the single source of truth for required environment configuration.
# Dependencies: Application framework environment loading (dotenv, python-decouple, etc.)
# Exports: Environment variable template showing all required and optional configuration with safe placeholders
# Placeholders:
#     - {{PROJECT_NAME}}: Name of the application (e.g., my-app, api-backend)
#     - {{DATABASE_TYPE}}: Type of database (postgresql, mysql, mongodb, sqlite)
#     - {{CACHE_TYPE}}: Type of cache (redis, memcached, none)
#     - {{API_SERVICES}}: External API services used (stripe, sendgrid, twilio, etc.)
# Usage: Copy to .env.example, replace {{PLACEHOLDERS}}, customize for project needs, commit to repository,
#     developers copy to .env and fill in actual values
# Related: .gitignore.security.template, how-to-prevent-secrets-in-git.md, secrets-management.md
# Implementation: Organized by functional area with clear documentation and security guidance for each variable

# ========================================
# {{PROJECT_NAME}} Environment Configuration
# ========================================
#
# IMPORTANT: This is a template file showing required environment variables.
#            Copy this file to .env and fill in actual values.
#
# NEVER COMMIT .env FILES TO VERSION CONTROL
#
# Setup Instructions:
# 1. Copy this file: cp .env.example .env
# 2. Fill in all <placeholder> values with actual secrets
# 3. Verify .env is in .gitignore
# 4. Keep this .env.example file updated as variables change
#
# Database: {{DATABASE_TYPE}}
# Cache: {{CACHE_TYPE}}
# External APIs: {{API_SERVICES}}
#
# Last Updated: [Update when adding/removing variables]
# ========================================

# ========================================
# Application Settings
# ========================================

# Application name and environment
APP_NAME={{PROJECT_NAME}}
APP_ENV=development
# Options: development, staging, production

# Debug mode - MUST be false in production
APP_DEBUG=true
# WARNING: Set to false in production to prevent information disclosure

# Application URL
APP_URL=http://localhost:3000
# Production example: https://api.example.com

# Server port
PORT=3000

# Application timezone
TZ=UTC
# Examples: America/New_York, Europe/London, Asia/Tokyo

# ========================================
# Security
# ========================================

# Application secret key for sessions, CSRF, etc.
# Generate with: openssl rand -hex 32
APP_SECRET_KEY=<generate-with-openssl-rand-hex-32>
# CRITICAL: Must be unique per environment, never reuse

# JWT secret for token signing
# Generate with: openssl rand -hex 64
JWT_SECRET=<generate-with-openssl-rand-hex-64>
# CRITICAL: Rotating this will invalidate all existing tokens

# JWT token expiration (seconds)
JWT_EXPIRATION=3600
# 3600 = 1 hour, 86400 = 24 hours

# CSRF token secret
CSRF_SECRET=<generate-with-openssl-rand-hex-32>

# Session secret
SESSION_SECRET=<generate-with-openssl-rand-hex-32>

# Encryption key for data at rest
# Generate with: openssl rand -base64 32
ENCRYPTION_KEY=<generate-with-openssl-rand-base64-32>

# ========================================
# Database Configuration - {{DATABASE_TYPE}}
# ========================================

# Database type
DATABASE_TYPE={{DATABASE_TYPE}}
# Options: postgresql, mysql, mongodb, sqlite

# Database host
DATABASE_HOST=localhost
# Production: Use private endpoint, not public IP

# Database port
DATABASE_PORT=5432
# PostgreSQL: 5432, MySQL: 3306, MongoDB: 27017

# Database name
DATABASE_NAME={{PROJECT_NAME}}_development
# Convention: projectname_environment

# Database user
DATABASE_USER=<your-database-username>
# Recommended: Use dedicated user per application

# Database password
DATABASE_PASSWORD=<your-secure-database-password>
# CRITICAL: Use strong password (min 16 chars, mixed case, numbers, symbols)
# Generate with: openssl rand -base64 24

# Database connection pool settings
DATABASE_POOL_MIN=2
DATABASE_POOL_MAX=10

# Alternative: Full database URL (if your framework uses this format)
# PostgreSQL format: postgresql://user:password@host:port/database
# MySQL format: mysql://user:password@host:port/database
# MongoDB format: mongodb://user:password@host:port/database
DATABASE_URL=<postgresql://user:password@host:port/database>

# Database SSL mode (important for production)
DATABASE_SSL_MODE=prefer
# Options: disable, allow, prefer, require, verify-ca, verify-full
# Production should use: require or verify-full

# ========================================
# Redis Cache - {{CACHE_TYPE}}
# ========================================

# Redis host
REDIS_HOST=localhost

# Redis port
REDIS_PORT=6379

# Redis password
REDIS_PASSWORD=<your-redis-password>
# Generate with: openssl rand -base64 16

# Redis database number
REDIS_DB=0
# 0-15 available by default

# Redis connection URL (alternative format)
REDIS_URL=redis://:password@localhost:6379/0

# Redis TLS (for production)
REDIS_TLS=false
# Set to true in production with TLS-enabled Redis

# Cache TTL (time to live in seconds)
CACHE_TTL=3600

# ========================================
# AWS Services
# ========================================

# AWS region
AWS_REGION=us-east-1
# Examples: us-east-1, eu-west-1, ap-southeast-1

# AWS access credentials
# Create IAM user with minimal required permissions
AWS_ACCESS_KEY_ID=<your-aws-access-key-id>
# Format: AKIA followed by 16 characters

AWS_SECRET_ACCESS_KEY=<your-aws-secret-access-key>
# CRITICAL: Never share or commit this value

# AWS S3 bucket
AWS_S3_BUCKET=<your-s3-bucket-name>
# Convention: company-project-environment-purpose

# AWS S3 region (if different from AWS_REGION)
AWS_S3_REGION=us-east-1

# Alternative: Use AWS IAM roles (recommended for EC2/ECS)
# When using IAM roles, remove AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY

# ========================================
# Email Service (SendGrid example)
# ========================================

# SMTP host
SMTP_HOST=smtp.sendgrid.net
# SendGrid: smtp.sendgrid.net
# Gmail: smtp.gmail.com
# AWS SES: email-smtp.us-east-1.amazonaws.com

# SMTP port
SMTP_PORT=587
# 587: TLS, 465: SSL, 25: Unencrypted (never use)

# SMTP user
SMTP_USER=apikey
# SendGrid uses literal string "apikey"

# SMTP password / API key
SMTP_PASSWORD=<your-sendgrid-api-key>
# SendGrid format: SG.xxxxxxxxxxxxxx
# CRITICAL: Use API keys, not account passwords

# Email sender address
EMAIL_FROM=noreply@example.com
# Must be verified domain in production

# Email sender name
EMAIL_FROM_NAME={{PROJECT_NAME}}

# ========================================
# Payment Processing (Stripe example)
# ========================================

# Stripe publishable key (safe to expose in frontend)
STRIPE_PUBLISHABLE_KEY=<pk_test_...>
# Test: pk_test_..., Live: pk_live_...

# Stripe secret key
STRIPE_SECRET_KEY=<sk_test_...>
# Test: sk_test_..., Live: sk_live_...
# CRITICAL: Never expose to frontend

# Stripe webhook secret
STRIPE_WEBHOOK_SECRET=<whsec_...>
# Format: whsec_ followed by random string
# Get from Stripe webhook settings

# Stripe API version
STRIPE_API_VERSION=2023-10-16

# ========================================
# OAuth Providers
# ========================================

# Google OAuth
GOOGLE_CLIENT_ID=<your-client-id>.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=<your-client-secret>
GOOGLE_CALLBACK_URL=http://localhost:3000/auth/google/callback

# GitHub OAuth
GITHUB_CLIENT_ID=<your-github-client-id>
GITHUB_CLIENT_SECRET=<your-github-client-secret>
GITHUB_CALLBACK_URL=http://localhost:3000/auth/github/callback

# ========================================
# Publishing API Keys
# ========================================

# PyPI API Token (for publishing packages)
# Generate at: https://pypi.org/manage/account/token/
# Format: pypi-...
PYPI_API_TOKEN=<your-pypi-api-token>

# Docker Hub Access Token (for publishing images)
# Generate at: https://hub.docker.com/settings/security
# Format: dckr_pat_...
DOCKERHUB_TOKEN=<your-dockerhub-access-token>
DOCKERHUB_USERNAME=<your-dockerhub-username>

# Facebook OAuth (if applicable)
# FACEBOOK_APP_ID=<your-app-id>
# FACEBOOK_APP_SECRET=<your-app-secret>
# FACEBOOK_CALLBACK_URL=http://localhost:3000/auth/facebook/callback

# ========================================
# External API Services - {{API_SERVICES}}
# ========================================

# Twilio (SMS/Voice)
# TWILIO_ACCOUNT_SID=<your-account-sid>
# TWILIO_AUTH_TOKEN=<your-auth-token>
# TWILIO_PHONE_NUMBER=<your-twilio-phone-number>

# Slack
# SLACK_WEBHOOK_URL=<your-webhook-url>
# SLACK_BOT_TOKEN=<xoxb-...>

# Sentry (Error Tracking)
# SENTRY_DSN=<your-sentry-dsn>
# Format: https://<key>@<organization>.ingest.sentry.io/<project>

# DataDog (Monitoring)
# DATADOG_API_KEY=<your-api-key>
# DATADOG_APP_KEY=<your-app-key>

# ========================================
# Search Services
# ========================================

# Elasticsearch
# ELASTICSEARCH_URL=http://localhost:9200
# ELASTICSEARCH_USERNAME=elastic
# ELASTICSEARCH_PASSWORD=<your-elasticsearch-password>

# Algolia
# ALGOLIA_APP_ID=<your-app-id>
# ALGOLIA_API_KEY=<your-api-key>
# ALGOLIA_SEARCH_KEY=<your-search-only-api-key>

# ========================================
# Message Queue
# ========================================

# RabbitMQ
# RABBITMQ_URL=amqp://localhost:5672
# RABBITMQ_USER=guest
# RABBITMQ_PASSWORD=<your-rabbitmq-password>

# Celery (Python task queue)
# CELERY_BROKER_URL=redis://localhost:6379/0
# CELERY_RESULT_BACKEND=redis://localhost:6379/0

# ========================================
# Logging and Monitoring
# ========================================

# Log level
LOG_LEVEL=info
# Options: debug, info, warn, error
# Production: info or warn

# Sentry DSN (error tracking)
SENTRY_DSN=<your-sentry-dsn>
# Optional but highly recommended for production

# Sentry environment
SENTRY_ENVIRONMENT=development
# Match to APP_ENV: development, staging, production

# Sentry traces sample rate (0.0 to 1.0)
SENTRY_TRACES_SAMPLE_RATE=0.1
# 0.1 = 10% of transactions, 1.0 = 100%

# ========================================
# Rate Limiting
# ========================================

# Rate limit per window
RATE_LIMIT_MAX=100
# Number of requests allowed

# Rate limit window (seconds)
RATE_LIMIT_WINDOW=60
# 60 = 1 minute window

# ========================================
# Feature Flags
# ========================================

# Enable specific features (useful for gradual rollouts)
FEATURE_NEW_UI=false
FEATURE_BETA_API=false
FEATURE_ADVANCED_SEARCH=false

# ========================================
# Development Tools
# ========================================

# Enable development tools (never in production)
ENABLE_DEBUG_TOOLBAR=true
# CRITICAL: Must be false in production

# Mock external services in development
MOCK_STRIPE=false
MOCK_EMAIL=false

# ========================================
# Testing
# ========================================

# Test database (separate from development)
TEST_DATABASE_URL=sqlite:///./test.db

# ========================================
# Important Security Reminders
# ========================================
#
# 1. NEVER commit .env to version control
# 2. Use strong, unique secrets for each environment
# 3. Rotate secrets regularly (quarterly minimum)
# 4. Use IAM roles instead of access keys when possible
# 5. Set DEBUG=false in production
# 6. Use SSL/TLS for all external connections
# 7. Restrict database access to application subnet
# 8. Review and audit environment variables quarterly
# 9. Use secret management services in production (AWS Secrets Manager, etc.)
# 10. Document any additions to this template
#
# For more information, see:
# - docs/security/secrets-management.md
# - docs/howtos/how-to-prevent-secrets-in-git.md
