# Purpose: Automated PyPI package publishing workflow triggered on version tags
# Scope: CI/CD automation for PyPI distribution and GitHub releases
# Overview: Automates the package publishing process when version tags are pushed. Runs complete
#     test suite and linting checks before building and publishing to PyPI. Uses PyPI Trusted
#     Publishing (OIDC) for secure authentication without API tokens. Creates GitHub releases
#     with changelog extraction. Ensures only tested, validated code is published to PyPI.
#     Triggered on tags matching v*.*.* pattern (e.g., v1.0.0, v2.1.3).
# Dependencies: Poetry (packaging), pytest (testing), PyPI Trusted Publishing, GitHub Actions
# Exports: Published package to PyPI, GitHub release with changelog
# Environment: GitHub Actions CI/CD, PyPI production environment
# Related: pyproject.toml (package metadata), CHANGELOG.md (release notes), test.yml (test workflow)
# Implementation: Multi-job workflow with quality gate, Poetry build, PyPI OIDC publishing

name: Publish to PyPI

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0, v2.1.3

permissions:
  contents: write  # For creating GitHub releases
  id-token: write  # For PyPI Trusted Publishing (OIDC)

jobs:
  test:
    name: Run Tests and Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --with dev

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Run linting (fast)
        run: just lint

      - name: Run type checking
        run: poetry run mypy src/

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=src --cov-report=term-missing --cov-report=xml

      - name: Check test coverage threshold
        run: |
          poetry run coverage report --fail-under=80

  build:
    name: Build Package
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build package
        run: poetry build

      - name: Verify package contents
        run: |
          tar -tzf dist/*.tar.gz | head -20
          unzip -l dist/*.whl | head -20

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  publish-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/thailint/

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Uses PyPI Trusted Publishing (OIDC) - no token needed
          # Configure at: https://pypi.org/manage/account/publishing/
          verbose: true

  create-release:
    name: Create GitHub Release
    needs: publish-pypi
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract changelog for version
        id: changelog
        run: |
          VERSION=${{ steps.version.outputs.version }}

          # Extract changelog section for this version
          if [ -f CHANGELOG.md ]; then
            # Find content between [VERSION] and next version or end
            CHANGELOG=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)

            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="See [CHANGELOG.md](CHANGELOG.md) for details."
            fi
          else
            CHANGELOG="Release $VERSION"
          fi

          # Save to file for multiline support
          echo "$CHANGELOG" > /tmp/changelog.txt

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.version }}
          body_path: /tmp/changelog.txt
          files: |
            dist/*.tar.gz
            dist/*.whl
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post-release notification
        run: |
          echo "‚úÖ Successfully published version ${{ steps.version.outputs.version }}"
          echo "üì¶ PyPI: https://pypi.org/project/thailint/${{ steps.version.outputs.version }}/"
          echo "üè∑Ô∏è  GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
