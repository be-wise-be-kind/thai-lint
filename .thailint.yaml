# Purpose: Thai-lint configuration for project linting rules
#
# Scope: Defines linter configurations including file placement and nesting depth rules
#
# Overview: Configuration file for thai-lint. Enforces project structure conventions
#     for Python source files, tests, configuration files, and documentation. Also
#     enforces code quality rules like maximum nesting depth to maintain readability.
#     Uses regex patterns and configurable limits to ensure consistent code quality.

# File placement linter configuration
file-placement:
  # Global patterns that apply to all directories
  global_patterns:
    # Python source files should be in src/
    deny:
      - pattern: '^(?!src/|tests/|scripts/|docs/|\\.ai/|\\.roadmap/).*\\.py$'
        message: "Python files should be in src/, tests/, scripts/, docs/, .ai/, or .roadmap/ directories"

  # Directory-specific rules
  directories:
    # Source code directory - only Python implementation files
    src:
      allow:
        - '.*\\.py$'
      deny:
        - 'test_.*\\.py$'
        - '.*_test\\.py$'

    # Tests directory - only test files and fixtures
    tests:
      allow:
        - 'test_.*\\.py$'
        - '.*_test\\.py$'
        - 'conftest\\.py$'
        - '__init__\\.py$'
      deny:
        - '^(?!test_|.*_test\\.py|conftest\\.py|__init__\\.py).*\\.py$'

    # Documentation directory
    docs:
      allow:
        - '.*\\.(md|rst|txt|py)$'  # Allow .py for doc generation scripts
      deny:
        - '^(?!.*\\.(md|rst|txt|py)$).*'

    # AI context directory
    .ai:
      allow:
        - '.*\\.(md|yaml|yml)$'

    # Roadmap directory
    .roadmap:
      allow:
        - '.*\\.md$'

  # Ignore patterns (files/directories to skip)
  ignore:
    - "__pycache__/"
    - "*.pyc"
    - ".git/"
    - ".venv/"
    - "venv/"
    - ".pytest_cache/"
    - ".mypy_cache/"
    - ".ruff_cache/"
    - "htmlcov/"
    - "*.egg-info/"
    - "dist/"
    - "build/"

# Nesting depth linter configuration
nesting:
  enabled: true
  max_nesting_depth: 3  # Maximum allowed nesting depth (default: 4)
  # Higher values allow more complex nesting but may reduce readability
  # Lower values enforce flatter code structure but may require more refactoring
  # Recommended: 3-5 depending on team preference and code complexity

# SRP (Single Responsibility Principle) linter configuration
srp:
  enabled: true
  max_methods: 7  # Maximum methods per class (default: 7)
  max_loc: 200  # Maximum lines of code per class (default: 200)
  check_keywords: true  # Check for responsibility keywords in class names
  keywords:
    - Manager
    - Handler
    - Processor
    - Utility
    - Helper
