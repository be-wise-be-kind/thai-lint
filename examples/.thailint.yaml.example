# Example thailint configuration (YAML format)
#
# This configuration demonstrates the new multi-linter format where each
# linter has its own top-level section. This allows multiple linters to
# coexist with their own configurations.

# File placement linter - enforces project structure
file-placement:
  # Global patterns apply across entire project
  global_patterns:
    deny:
      - pattern: "^(?!src/|tests/|scripts/).*\\.py$"
        reason: "Python files must be in src/, tests/, or scripts/"
      - pattern: ".*\\.tmp$"
        reason: "Temporary files should not be committed"

  # Directory-specific rules
  directories:
    src/:
      allow:
        - "^src/.*\\.py$"
      deny:
        - pattern: "^src/.*test.*\\.py$"
          reason: "Tests belong in tests/ directory"

    tests/:
      allow:
        - "^tests/test_.*\\.py$"
        - "^tests/.*_test\\.py$"
        - "^tests/conftest\\.py$"

    scripts/:
      allow:
        - "^scripts/.*\\.py$"

  # Files and directories to ignore during linting
  ignore:
    - "__pycache__/"
    - "*.pyc"
    - ".venv/"
    - ".git/"
    - "node_modules/"
    - "dist/"
    - "build/"

# Nesting depth linter - detects excessive code nesting
nesting:
  enabled: true
  max_nesting_depth: 4  # Maximum allowed nesting depth (default: 4)
  # Recommended: 3-5 depending on team preference and code complexity
  # Lower values enforce flatter code structure
  # Higher values allow more complex nesting but may reduce readability

# SRP linter - detects Single Responsibility Principle violations
srp:
  enabled: true

  # Default thresholds
  max_methods: 7   # Maximum methods per class (default: 7)
  max_loc: 200     # Maximum lines of code per class (default: 200)

  # Language-specific thresholds (optional)
  # TypeScript/JavaScript tend to be more verbose with type annotations
  python:
    max_methods: 8
    max_loc: 200

  typescript:
    max_methods: 10   # More lenient for type verbosity
    max_loc: 250

  javascript:
    max_methods: 10
    max_loc: 225

  # Responsibility keyword detection
  check_keywords: true
  keywords:
    - Manager
    - Handler
    - Processor
    - Utility
    - Helper

# Magic numbers linter - detects unnamed numeric literals
magic-numbers:
  enabled: true

  # Numbers that are acceptable without constants (self-explanatory)
  allowed_numbers:
    - -1   # Common error/not-found indicator
    - 0    # Zero/false/empty
    - 1    # One/true/first
    - 2    # Two/second
    - 10   # Decimal base
    - 100  # Percentage base
    - 1000 # Thousand

  # Maximum integer allowed in range() or enumerate() without constant
  max_small_integer: 10

# Future linters will be added as separate top-level sections:
#
# code-quality:
#   max-complexity: 10
#   max-line-length: 100
#   ...
#
# security:
#   check-secrets: true
#   check-dependencies: true
#   ...
